{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/theta_metrics_server/theta-guardian-monitor/src/Table.js\";\nimport React, { Component } from 'react';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props); //since we are extending class Table so we have to use super in order to override Component class constructor\n\n    this.state = {\n      chosen: -1,\n      connected: []\n    };\n  }\n\n  handleClick(i) {\n    // var conn = []\n    // var node = this.props.Nodes[i]\n    // node.Details._peer.map((id) => {\n    //    if (this.props.aMap[id] !== undefined) {\n    //       conn.push(this.props.aMap[id])\n    //    }\n    // })\n    this.props.onClick(i); // this.setState({chosen : i, connected : conn})\n  }\n\n  renderTableData() {\n    console.log(this.props.Nodes);\n    return this.props.Nodes.map((node, index) => {\n      var details = node.Details;\n      var i = index;\n      var bcolor = \"background-normal\";\n      console.log(\"xj1 i = \" + i + \" choosen is \" + this.state.chosen);\n      this.state.connected.map(num => {\n        bcolor = \"background-red\";\n      });\n\n      if (i === this.state.choosen) {\n        bcolor = \"background-blue\";\n      }\n\n      return React.createElement(\"tr\", {\n        key: details._id,\n        className: bcolor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, details._id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, details._ip), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, details._city), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, details._country), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, details._latitude), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, details._longitude), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"showPeersButtton\",\n        onClick: () => this.handleClick(i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Show Peers\")));\n    });\n  }\n\n  renderTableHeader() {\n    let header = [\"ID\", \"IP\", \"CITY\", \"Country\", \"LATITUDE\", \"LONGITUDE\"];\n    return header.map((key, index) => {\n      return React.createElement(\"th\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, key.toUpperCase());\n    });\n  }\n\n  renderInfo() {\n    if (this.props.Nodes && this.state.choosen > 0) {\n      var peers = this.props.Nodes[this.state.choosen].Details._peer;\n      console.log(\"xj4 peers = \" + peers);\n      return peers.map(id => {\n        return React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, id));\n      });\n    }\n\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\n    if (this.props.Nodes) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Guardian Node Table\"), React.createElement(\"table\", {\n        className: \"nodeTable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.renderTableHeader()), this.renderTableData())), React.createElement(\"div\", {\n        className: \"InfoBar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Peers connected\"), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.renderInfo()))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/home/ubuntu/theta_metrics_server/theta-guardian-monitor/src/Table.js"],"names":["React","Component","Table","constructor","props","state","chosen","connected","handleClick","i","onClick","renderTableData","console","log","Nodes","map","node","index","details","Details","bcolor","num","choosen","_id","_ip","_city","_country","_latitude","_longitude","renderTableHeader","header","key","toUpperCase","renderInfo","peers","_peer","id","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nclass Table extends Component {\n   constructor(props) {\n      super(props)//since we are extending class Table so we have to use super in order to override Component class constructor\n      this.state = {\n         chosen : -1,\n         connected : []\n       }\n   }\n\n   handleClick(i) {\n      // var conn = []\n      // var node = this.props.Nodes[i]\n      // node.Details._peer.map((id) => {\n      //    if (this.props.aMap[id] !== undefined) {\n      //       conn.push(this.props.aMap[id])\n      //    }\n      // })\n      this.props.onClick(i)\n      // this.setState({chosen : i, connected : conn})\n   }\n   \n   renderTableData() {\n      console.log(this.props.Nodes)\n      return this.props.Nodes.map((node, index) => {\n         var details = node.Details;\n         var i = index\n         var bcolor = \"background-normal\"\n         console.log(\"xj1 i = \" + i + \" choosen is \" + this.state.chosen)\n         this.state.connected.map((num) => {bcolor = \"background-red\"})\n         if (i === this.state.choosen) {\n            bcolor = \"background-blue\"\n         }\n         return (\n            <tr key={details._id} className={bcolor}>\n               <td>{details._id}</td>\n               <td>{details._ip}</td>\n               <td>{details._city}</td>\n               <td>{details._country}</td>\n               <td>{details._latitude}</td>\n               <td>{details._longitude}</td>\n               <td>\n                  <button className=\"showPeersButtton\" onClick={() => this.handleClick(i)} >\n                     Show Peers \n                  </button>\n               </td>\n            </tr>\n         )\n      })\n   }\n\n   renderTableHeader() {\n      let header = [\"ID\",\"IP\",\"CITY\",\"Country\",\"LATITUDE\",\"LONGITUDE\"]\n      return header.map((key, index) => {\n         return <th key={index}>{key.toUpperCase()}</th>\n      })\n   }\n\n   renderInfo(){\n      if (this.props.Nodes && this.state.choosen > 0){\n         var peers = this.props.Nodes[this.state.choosen].Details._peer\n         console.log(\"xj4 peers = \" + peers)\n         return peers.map((id) => {\n            return <tr><td>{id}</td></tr>\n         })\n      }\n      return (\n         <tr/>\n      )\n   }\n\n   render() { //Whenever our class runs, render method will be called automatically, it may have already defined in the constructor behind the scene.\n      if (this.props.Nodes){\n         return (\n            <div>\n               <h1>Guardian Node Table</h1>\n               <table className='nodeTable'>\n                   <tbody>\n                       <tr>{this.renderTableHeader()}</tr>\n                       {this.renderTableData()}\n                   </tbody>\n               </table>\n               <div className=\"InfoBar\">\n                  <h3 className=\"title\">Peers connected</h3>\n                  <table>\n                     <tbody>\n                        {this.renderInfo()}\n                     </tbody>\n                  </table>\n               </div>\n            </div>\n         )\n      }\n      return(\n         <div/>\n      )\n   }\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}